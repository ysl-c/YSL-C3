# YSL-C3 standard library for C99
func add_u8 u8 a u8 b -> u8
	asm return a + b;
end

func add_u16 u16 a u16 b -> u8
	asm return a + b;
end

func add_u32 u32 a u32 b -> u32
	asm return a + b;
end

func add_u64 u64 a u64 b -> u64
	asm return a + b;
end

func add_i8 i8 a i8 b -> i8
	asm return a + b;
end

func add_i16 i16 a i16 b -> i16
	asm return a + b;
end

func add_i32 i32 a i32 b -> i32
	asm return a + b;
end

func add_i64 i64 a i64 b -> i64
	asm return a + b;
end

func sub_u8 u8 a u8 b -> u8
	asm return a - b;
end

func sub_u16 u16 a u16 b -> u16
	asm return a - b;
end

func sub_u32 u32 a u32 b -> u32
	asm return a - b;
end

func sub_u64 u64 a u64 b -> u64
	asm return a - b;
end

func sub_i8 i8 a i8 b -> i8
	asm return a - b;
end

func sub_i16 i16 a i16 b -> i16
	asm return a - b;
end

func sub_i32 i32 a i32 b -> i32
	asm return a - b;
end

func sub_i64 i64 a i64 b -> i64
	asm return a - b;
end

func mul_u8 u8 a u8 b -> u8
	asm return a * b;
end

func mul_u16 u16 a u16 b -> u16
	asm return a * b;
end

func mul_u32 u32 a u32 b -> u32
	asm return a * b;
end

func mul_u64 u64 a u64 b -> u64
	asm return a * b;
end

func mul_i8 i8 a i8 b -> i8
	asm return a * b;
end

func mul_i16 i16 a i16 b -> i16
	asm return a * b;
end

func mul_i32 i32 a i32 b -> i32
	asm return a * b;
end

func mul_i64 i64 a i64 b -> i64
	asm return a * b;
end

func div_u8 u8 a u8 b -> u8
	asm return a / b;
end

func div_u16 u16 a u16 b -> u16
	asm return a / b;
end

func div_u32 u32 a u32 b -> u32
	asm return a / b;
end

func div_u64 u64 a u64 b -> u64
	asm return a / b;
end

func div_i8 i8 a i8 b -> i8
	asm return a / b;
end

func div_i16 i16 a i16 b -> i16
	asm return a / b;
end

func div_i32 i32 a i32 b -> i32
	asm return a / b;
end

func div_i64 i64 a i64 b -> i64
	asm return a / b;
end

func mod_u8 u8 a u8 b -> u8
	asm return a % b;
end

func mod_u16 u16 a u16 b -> u16
	asm return a % b;
end

func mod_u32 u32 a u32 b -> u32
	asm return a % b;
end

func mod_u64 u64 a u64 b -> u64
	asm return a % b;
end

func mod_i8 i8 a i8 b -> i8
	asm return a % b;
end

func mod_i16 i16 a i16 b -> i16
	asm return a % b;
end

func mod_i32 i32 a i32 b -> i32
	asm return a % b;
end

func mod_i64 i64 a i64 b -> i64
	asm return a % b;
end

func print_int i64 n
	asm int printf(const char *restrict format, ...);
	asm printf("%ld", n);
end

func print_uint u64 n
	asm int printf(const char *restrict format, ...);
	asm printf("%lu", n);
end

func putch u8 ch
	extern i32 putchar i32
	putchar ch
end

func write_u8 addr where u8 value
	asm *((uint8_t*) where) = value;
end

func write_u16 addr where u16 value
	asm *((uint16_t*) where) = value;
end

func write_u32 addr where u32 value
	asm *((uint32_t*) where) = value;
end

func write_u64 addr where u64 value
	asm *((uint64_t*) where) = value;
end

func write_i8 addr where i8 value
	asm *((int8_t*) where) = value;
end

func write_i16 addr where i16 value
	asm *((int16_t*) where) = value;
end

func write_i32 addr where i32 value
	asm *((int32_t*) where) = value;
end

func write_i64 addr where i64 value
	asm *((int64_t*) where) = value;
end

func read_u8 addr where -> u8
	asm return *((uint8_t*) where);
end

func read_u16 addr where -> u16
	asm return *((uint16_t*) where);
end

func read_u32 addr where -> u32
	asm return *((uint32_t*) where);
end

func read_u64 addr where -> u64
	asm return *((uint64_t*) where);
end

func read_i8 addr where -> i8
	asm return *((int8_t*) where);
end

func read_i16 addr where -> i16
	asm return *((int16_t*) where);
end

func read_i32 addr where -> i32
	asm return *((int32_t*) where);
end

func read_i64 addr where -> i64
	asm return *((int64_t*) where);
end

func alloc u64 size -> addr
	extern addr malloc u64
	let addr ret
	malloc size -> ret
	return ret
end

extern addr realloc addr u64
extern void free addr

func uint_equals u64 a u64 b -> u8
	asm return a == b;
end

func int_equals i64 a i64 b -> u8
	asm return a == b;
end
